// src/pages/KtpEditorPage/page.tsx

import React, { useEffect, useState } from "react"; // <-- NEW IMPORT useState
import { useParams } from "react-router-dom";
import {
  Container,
  Typography,
  CircularProgress,
  Alert,
  Box,
  Button,
  FormControl, // <-- NEW IMPORT
  InputLabel, // <-- NEW IMPORT
  Select, // <-- NEW IMPORT
  MenuItem, // <-- NEW IMPORT
  OutlinedInput, // <-- NEW IMPORT
  Chip,
  Paper, // <-- NEW IMPORT
} from "@mui/material";
import { useAppSelector, useAppDispatch } from "../../shared/lib/hooks";
import { initKtpPlan, autofillDates } from "../../entities/ktp/model/slice"; // <-- UPDATE: added autofillDates
import { KtpEditor } from "../../features/KTPEditor";
import { DayOfWeek } from "../../entities/ktp/model/types"; // <-- NEW IMPORT

const KtpEditorPage: React.FC = () => {
  const { tupId } = useParams<{ tupId: string }>();
  const dispatch = useAppDispatch();

  const { status, error, sourceTupName, plan } = useAppSelector(
    (state) => state.ktpEditor
  );
  // üí° –ù–û–í–û–ï: –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏–∑ Redux
  const calendarState = useAppSelector((state) => state.calendar);
  const activeProfile = calendarState.profiles.find(
    (p) => p.id === calendarState.activeProfileId
  );
  const quarters = activeProfile ? Object.keys(activeProfile.quarters) : [];

  // üí° –ù–û–í–û–ï: –õ–æ–∫–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
  const [selectedProfile, setSelectedProfile] = useState(
    calendarState.activeProfileId || ""
  );
  const [startQuarter, setStartQuarter] = useState(quarters[0] || "");
  const [selectedDays, setSelectedDays] = useState<DayOfWeek[]>([]);

  useEffect(() => {
    if (tupId) {
      dispatch(initKtpPlan(tupId));
    }
  }, [dispatch, tupId]);

  const handleAutofill = () => {
    if (activeProfile && selectedDays.length > 0 && startQuarter) {
      dispatch(
        autofillDates({
          startQuarter: startQuarter as "q1" | "q2" | "q3" | "q4",
          selectedDays,
          calendarProfile: activeProfile,
          holidays: calendarState.holidays,
        })
      );
    }
  };

  let content;

  if (status === "loading") {
    content = <CircularProgress />;
  } else if (status === "succeeded") {
    content = <KtpEditor />;
  } else if (status === "failed") {
    content = <Alert severity="error">{error}</Alert>;
  }

  return (
    <Container maxWidth="xl">
      <Typography variant="h4" component="h1" gutterBottom>
        –†–µ–¥–∞–∫—Ç–æ—Ä –ö–¢–ü –Ω–∞ –æ—Å–Ω–æ–≤–µ: "{sourceTupName || "..."}"
      </Typography>

      <Paper elevation={2} sx={{ p: 2, mb: 3 }}>
        <Typography variant="h6" gutterBottom>
          –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
        </Typography>
        <Box
          sx={{
            display: "flex",
            gap: 2,
            alignItems: "center",
            flexWrap: "wrap",
          }}
        >
          <FormControl sx={{ minWidth: 200 }}>
            <InputLabel>–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è</InputLabel>
            <Select
              value={selectedProfile}
              onChange={(e) => setSelectedProfile(e.target.value)}
              label="–ü—Ä–æ—Ñ–∏–ª—å –∫–∞–ª–µ–Ω–¥–∞—Ä—è"
              disabled={calendarState.profiles.length === 0}
            >
              {calendarState.profiles.map((p) => (
                <MenuItem key={p.id} value={p.id}>
                  {p.name}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <FormControl sx={{ minWidth: 150 }}>
            <InputLabel>–ù–∞—á–∞—Ç—å —Å —á–µ—Ç–≤–µ—Ä—Ç–∏</InputLabel>
            <Select
              value={startQuarter}
              onChange={(e) => setStartQuarter(e.target.value as string)}
              label="–ù–∞—á–∞—Ç—å —Å —á–µ—Ç–≤–µ—Ä—Ç–∏"
              disabled={quarters.length === 0}
            >
              {quarters.map((q, index) => (
                <MenuItem key={q} value={q}>
                  –ß–µ—Ç–≤–µ—Ä—Ç—å {index + 1}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          {/* –í—ã–±–æ—Ä –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ */}
          <FormControl sx={{ minWidth: 250 }}>
            <InputLabel>–î–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤</InputLabel>
            <Select
              multiple
              value={selectedDays}
              onChange={(e) => setSelectedDays(e.target.value as DayOfWeek[])}
              input={<OutlinedInput label="–î–Ω–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —É—Ä–æ–∫–æ–≤" />}
              renderValue={(selected) => (
                <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                  {selected.map((value) => (
                    <Chip key={value} label={value} />
                  ))}
                </Box>
              )}
            >
              {[
                "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                "–≤—Ç–æ—Ä–Ω–∏–∫",
                "—Å—Ä–µ–¥–∞",
                "—á–µ—Ç–≤–µ—Ä–≥",
                "–ø—è—Ç–Ω–∏—Ü–∞",
                "—Å—É–±–±–æ—Ç–∞",
                "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
              ].map((day) => (
                <MenuItem key={day} value={day}>
                  {day}
                </MenuItem>
              ))}
            </Select>
          </FormControl>
          <Button
            variant="contained"
            color="secondary"
            onClick={handleAutofill}
            disabled={
              !selectedProfile || selectedDays.length === 0 || !startQuarter
            }
          >
            –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–∞—Ç
          </Button>
        </Box>
      </Paper>

      {content}

      <Box sx={{ mt: 4, display: "flex", justifyContent: "flex-end" }}>
        <Button
          variant="contained"
          size="large"
          onClick={() => console.log(plan)} // –õ–æ–≥–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        >
          –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ö–¢–ü
        </Button>
      </Box>
    </Container>
  );
};

export default KtpEditorPage;
